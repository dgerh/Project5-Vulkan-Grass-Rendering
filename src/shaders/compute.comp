#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI_OVER_FOUR 0.78539816339f
#define GRAVITY_STRENGTH 9.83f

#define ORIENTATION_CULL_VAL 0.9f
#define FRUSTUM_CULL_VAL 0.05f
#define MAX_DISTANCE 40
#define NUM_BUCKETS 10

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
    vec4 pos;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout (set = 2, binding = 0) buffer InputBlades {
    Blade[] inputBlades;
};

layout (set = 2, binding = 1) buffer OutputBlades {
    Blade[] outputBlades;
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade currBlade = inputBlades[gl_GlobalInvocationID.x];

    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;

    float theta = currBlade.v0.w;
    vec3 f = vec3(cos(theta + PI_OVER_FOUR), 0, sin(theta + PI_OVER_FOUR));
    float stiffness = currBlade.up.w;
    float width = currBlade.v1.w;

    //gravity
    vec4 D = vec4(0.f, -1.f, 0.f, GRAVITY_STRENGTH);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 gF = 0.25 * length(gE) * f;
    vec3 g_force = gE + gF;

    //recovery
    vec3 iv2 = v0 + width * up;
    vec3 r_force = (iv2 - v2) * stiffness;

    //wind
    //vec3 windDirection = vec3(0.5f, 0.f, 0.f);
    vec3 windDirection = vec3(sin(totalTime * 0.84f) * 2.f - 1.f, cos((totalTime + 23123.f * 314.f + 1234.f) * 0.23f) * 2.f - 1.f, 0.f);
    vec3 windAlignment = vec3(1.f);
    vec3 w_force = windDirection * windAlignment;

    //apply forces
    vec3 deltaForce = (r_force + g_force + w_force) * deltaTime;
    v2 += deltaForce;
    v2 = v2 - up * min(up * (v2 - v0), 0);
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + width * up * max(1.f - lProj / width, 0.05 * max(lProj / width, 1.f));

    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);

    float n = 3.f;
    float L = (2.f * L0 + (n - 1.f) * L1) / (n + 1.f);

    float r = width / L;
    vec3 v1_corr = v0 + r * (v1 - v0);
    vec3 v2_corr = v1_corr + r * (v2 - v1);

    currBlade.v1.xyz = v1_corr.xyz;
    currBlade.v2.xyz = v2_corr.xyz;
    inputBlades[gl_GlobalInvocationID.x] = currBlade;

	// TODO: Cull blades that are too far away or not in the camera frustum
    vec3 camDir = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    vec3 bladeDir = vec3(cos(theta), 0.f, sin(theta));
    if (abs(dot(camDir, bladeDir)) > ORIENTATION_CULL_VAL) {
        return;
    }

    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 mClip = camera.proj * camera.view * vec4(m, 1.f);
    float limit = mClip.w + FRUSTUM_CULL_VAL;
    if (mClip.x < -limit || mClip.x > limit || mClip.y < -limit || mClip.y > limit || mClip.z < -limit || mClip.z > limit) {
        return;
    }

    vec3 camPos = camera.pos.xyz;
    float dproj = length(v0 - camPos - up * dot(v0 - camPos, up));
    if (gl_GlobalInvocationID.x % NUM_BUCKETS > floor(NUM_BUCKETS * (1 - dproj / MAX_DISTANCE))) {
        return;
    }

    //DONE: write blades to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    const uint culledIdx = atomicAdd(numBlades.vertexCount, 1);
    outputBlades[culledIdx] = inputBlades[gl_GlobalInvocationID.x];
}
